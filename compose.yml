services:
  database:
    image: postgres:17
    container_name: geo-database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - database_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - geo-network

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - geo-network

  backend:
    image: geo-backend:1.0.0
    container_name: geo-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SERVER_PORT: ${SERVER_PORT}
      SERVER_HOST: ${SERVER_HOST}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - 2000:2000
    depends_on:
      - database
    restart: always
    networks:
      - geo-network

  frontend:
    image: geo-frontend:1.0.0
    container_name: geo-frontend
    build:
      context: /frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      VITE_CLERK_PUBLISHABLE_KEY: ${VITE_CLERK_PUBLISHABLE_KEY}
    depends_on:
      - backend
    restart: always
    networks:
      - geo-network

networks:
  geo-network:
    driver: bridge

volumes:
  database_data:
  pgadmin_data: